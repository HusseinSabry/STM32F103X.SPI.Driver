
Drivers_Hussein.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  4 .ARM          00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f18  08000f20  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000f20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f20  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005176  00000000  00000000  00010f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c67  00000000  00000000  000160bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dcc  00000000  00000000  00016d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001792  00000000  00000000  00017ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000028f1  00000000  00000000  00019682  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b976  00000000  00000000  0001bf73  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000278e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000710  00000000  00000000  00027964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ee8 	.word	0x08000ee8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ee8 	.word	0x08000ee8

08000170 <Clk_Init>:


}

void Clk_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clk_Init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clk_Init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clk_Init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clk_Init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clk_Init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clk_Init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <Hussein_IRQ_Callback>:


unsigned char ch;

void Hussein_IRQ_Callback(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, (uint16_t*) &ch, disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	490d      	ldr	r1, [pc, #52]	; (80001e0 <Hussein_IRQ_Callback+0x3c>)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <Hussein_IRQ_Callback+0x40>)
 80001ae:	f000 fdd1 	bl	8000d54 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1,(uint16_t*) &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	490a      	ldr	r1, [pc, #40]	; (80001e0 <Hussein_IRQ_Callback+0x3c>)
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <Hussein_IRQ_Callback+0x40>)
 80001b8:	f000 fdaa 	bl	8000d10 <MCAL_UART_SendData>

	//send to SPI
#ifdef MCU_ACT_AS_MASTER

	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN_4, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	2110      	movs	r1, #16
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <Hussein_IRQ_Callback+0x44>)
 80001c2:	f000 f96d 	bl	80004a0 <MCAL_GPIO_WRITE_PIN>
	MCAL_SPI_TX_RX(SPI1,(uint16_t*) &ch, pollingEnable);
 80001c6:	2200      	movs	r2, #0
 80001c8:	4905      	ldr	r1, [pc, #20]	; (80001e0 <Hussein_IRQ_Callback+0x3c>)
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <Hussein_IRQ_Callback+0x48>)
 80001cc:	f000 fb6c 	bl	80008a8 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN_4, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <Hussein_IRQ_Callback+0x44>)
 80001d6:	f000 f963 	bl	80004a0 <MCAL_GPIO_WRITE_PIN>





}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000028 	.word	0x20000028
 80001e4:	40013800 	.word	0x40013800
 80001e8:	40010800 	.word	0x40010800
 80001ec:	40013000 	.word	0x40013000

080001f0 <main>:
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0
	USART_Coinf uartCFG;
	GPIO_PinConfig_t PinConfig;

	Clk_Init();
 80001f6:	f7ff ffbb 	bl	8000170 <Clk_Init>

	//===================UART INIT==============================
	uartCFG.BaudRate = USART_BaudRate_115200;
 80001fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001fe:	623b      	str	r3, [r7, #32]
	uartCFG.HWFlowCTL = USART_HWFLOWCTL_NONE;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uartCFG.IRQ_ENABLE = USART_IRQ_ENABLE_RXNEIE;
 8000206:	2320      	movs	r3, #32
 8000208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.P_IRQ_CALLBACK = Hussein_IRQ_Callback;
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <main+0xa8>)
 800020e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartCFG.Parity = USART_Parity_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uartCFG.PayLoadLenght = USART_PayLoad_Length_8B;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.StopBits = USART_STOP_ONE;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uartCFG.USART_Mode =USART_Mode_TX_RX;
 8000222:	230c      	movs	r3, #12
 8000224:	773b      	strb	r3, [r7, #28]
	MCAL_UART_Init(USART1,&uartCFG);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	4619      	mov	r1, r3
 800022c:	481b      	ldr	r0, [pc, #108]	; (800029c <main+0xac>)
 800022e:	f000 fcc1 	bl	8000bb4 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000232:	481a      	ldr	r0, [pc, #104]	; (800029c <main+0xac>)
 8000234:	f000 fdbc 	bl	8000db0 <MCAL_UART_GPIO_Set_Pins>
	//======================SPI INIT=============================
	SPI_Config SPI1_Coinfig;

	//common configurations

	SPI1_Coinfig.CLKPhase = SPI_CLKPhase_2ndEDGE_First_data_capture;
 8000238:	2301      	movs	r3, #1
 800023a:	817b      	strh	r3, [r7, #10]
	SPI1_Coinfig.CLKPolarity = SPI_CLKPolarity_high_when_idel;
 800023c:	2302      	movs	r3, #2
 800023e:	813b      	strh	r3, [r7, #8]
	SPI1_Coinfig.Data_Size = SPI_DataSize_8Bit;
 8000240:	2300      	movs	r3, #0
 8000242:	80fb      	strh	r3, [r7, #6]
	SPI1_Coinfig.Frame_Format = SPI_FrameFormat_MSB_Transmitted_First;
 8000244:	2300      	movs	r3, #0
 8000246:	80bb      	strh	r3, [r7, #4]
	//ASUME CLK 8MHZ
	SPI1_Coinfig.SPI_BAUDRATE_PRECALER = BAUDRATE_PRECALER_8;
 8000248:	2310      	movs	r3, #16
 800024a:	81fb      	strh	r3, [r7, #14]
	SPI1_Coinfig.Comunication_Mode = SPI_direction_2Line;
 800024c:	2300      	movs	r3, #0
 800024e:	807b      	strh	r3, [r7, #2]

#ifdef MCU_ACT_AS_MASTER

	SPI1_Coinfig.Device_Mode = SPI_Device_Mode_Master;
 8000250:	2304      	movs	r3, #4
 8000252:	803b      	strh	r3, [r7, #0]
	SPI1_Coinfig.P_IRQ_CallBack = NULL;
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]
	SPI1_Coinfig.NSS = SPI_NSS_Software_Set;
 8000258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800025c:	81bb      	strh	r3, [r7, #12]
	SPI1_Coinfig.IRQ_Enable = SPI_IRQ_ENABLE_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	823b      	strh	r3, [r7, #16]

#endif

	MCAL_SPI_Init(SPI1,&SPI1_Coinfig);
 8000262:	463b      	mov	r3, r7
 8000264:	4619      	mov	r1, r3
 8000266:	480e      	ldr	r0, [pc, #56]	; (80002a0 <main+0xb0>)
 8000268:	f000 fa8e 	bl	8000788 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SET_PINS(SPI1);
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <main+0xb0>)
 800026e:	f000 fba1 	bl	80009b4 <MCAL_SPI_GPIO_SET_PINS>


	//configure SS by GPIOA PORT4
	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000272:	2310      	movs	r3, #16
 8000274:	833b      	strh	r3, [r7, #24]
	PinConfig.GPIO_Mode = GPIO_MODE_output_push_pull;
 8000276:	2304      	movs	r3, #4
 8000278:	76bb      	strb	r3, [r7, #26]
	PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 800027a:	2301      	movs	r3, #1
 800027c:	76fb      	strb	r3, [r7, #27]
	MCAL_GPIO_INIT(GPIOA, &PinConfig);
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	4619      	mov	r1, r3
 8000284:	4807      	ldr	r0, [pc, #28]	; (80002a4 <main+0xb4>)
 8000286:	f000 f89b 	bl	80003c0 <MCAL_GPIO_INIT>


	//force the slave slect "high" ide mode

	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN_4, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	2110      	movs	r1, #16
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0xb4>)
 8000290:	f000 f906 	bl	80004a0 <MCAL_GPIO_WRITE_PIN>





	while (1)
 8000294:	e7fe      	b.n	8000294 <main+0xa4>
 8000296:	bf00      	nop
 8000298:	080001a5 	.word	0x080001a5
 800029c:	40013800 	.word	0x40013800
 80002a0:	40013000 	.word	0x40013000
 80002a4:	40010800 	.word	0x40010800

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fde3 	bl	8000ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff89 	bl	80001f0 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	20000068 	.word	0x20000068

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>

080002fa <GET_CRLH_Position>:

#include <Stm32_f103_c6_GPIO_Driver.h>


uint8_t GET_CRLH_Position (uint16_t PinNumber)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b083      	sub	sp, #12
 80002fe:	af00      	add	r7, sp, #0
 8000300:	4603      	mov	r3, r0
 8000302:	80fb      	strh	r3, [r7, #6]

	if (PinNumber == GPIO_PIN_0)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d101      	bne.n	800030e <GET_CRLH_Position+0x14>
	{
		return 0;
 800030a:	2300      	movs	r3, #0
 800030c:	e053      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_1)
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	2b02      	cmp	r3, #2
 8000312:	d101      	bne.n	8000318 <GET_CRLH_Position+0x1e>
	{
		return 4;
 8000314:	2304      	movs	r3, #4
 8000316:	e04e      	b.n	80003b6 <GET_CRLH_Position+0xbc>

	}
	else if (PinNumber == GPIO_PIN_2)
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	2b04      	cmp	r3, #4
 800031c:	d101      	bne.n	8000322 <GET_CRLH_Position+0x28>
	{

		return 8;
 800031e:	2308      	movs	r3, #8
 8000320:	e049      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_3)
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	2b08      	cmp	r3, #8
 8000326:	d101      	bne.n	800032c <GET_CRLH_Position+0x32>
	{
		return 12;
 8000328:	230c      	movs	r3, #12
 800032a:	e044      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_4)
 800032c:	88fb      	ldrh	r3, [r7, #6]
 800032e:	2b10      	cmp	r3, #16
 8000330:	d101      	bne.n	8000336 <GET_CRLH_Position+0x3c>
	{
		return 16;
 8000332:	2310      	movs	r3, #16
 8000334:	e03f      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_5)
 8000336:	88fb      	ldrh	r3, [r7, #6]
 8000338:	2b20      	cmp	r3, #32
 800033a:	d101      	bne.n	8000340 <GET_CRLH_Position+0x46>
	{
		return 20;
 800033c:	2314      	movs	r3, #20
 800033e:	e03a      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_6)
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	2b40      	cmp	r3, #64	; 0x40
 8000344:	d101      	bne.n	800034a <GET_CRLH_Position+0x50>
	{
		return 24;
 8000346:	2318      	movs	r3, #24
 8000348:	e035      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_7)
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	2b80      	cmp	r3, #128	; 0x80
 800034e:	d101      	bne.n	8000354 <GET_CRLH_Position+0x5a>
	{
		return 28;
 8000350:	231c      	movs	r3, #28
 8000352:	e030      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_8)
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800035a:	d101      	bne.n	8000360 <GET_CRLH_Position+0x66>
	{
		return 0;
 800035c:	2300      	movs	r3, #0
 800035e:	e02a      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_9)
 8000360:	88fb      	ldrh	r3, [r7, #6]
 8000362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000366:	d101      	bne.n	800036c <GET_CRLH_Position+0x72>
	{
		return 4;
 8000368:	2304      	movs	r3, #4
 800036a:	e024      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_10)
 800036c:	88fb      	ldrh	r3, [r7, #6]
 800036e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000372:	d101      	bne.n	8000378 <GET_CRLH_Position+0x7e>
	{
		return 8;
 8000374:	2308      	movs	r3, #8
 8000376:	e01e      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_11)
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800037e:	d101      	bne.n	8000384 <GET_CRLH_Position+0x8a>
	{
		return 12;
 8000380:	230c      	movs	r3, #12
 8000382:	e018      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_12)
 8000384:	88fb      	ldrh	r3, [r7, #6]
 8000386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800038a:	d101      	bne.n	8000390 <GET_CRLH_Position+0x96>
	{
		return 16;
 800038c:	2310      	movs	r3, #16
 800038e:	e012      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_13)
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000396:	d101      	bne.n	800039c <GET_CRLH_Position+0xa2>
	{
		return 20;
 8000398:	2314      	movs	r3, #20
 800039a:	e00c      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_14)
 800039c:	88fb      	ldrh	r3, [r7, #6]
 800039e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003a2:	d101      	bne.n	80003a8 <GET_CRLH_Position+0xae>
	{
		return 24;
 80003a4:	2318      	movs	r3, #24
 80003a6:	e006      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}
	else if (PinNumber == GPIO_PIN_15)
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003ae:	d101      	bne.n	80003b4 <GET_CRLH_Position+0xba>
	{
		return 28;
 80003b0:	231c      	movs	r3, #28
 80003b2:	e000      	b.n	80003b6 <GET_CRLH_Position+0xbc>
	}else
	return 0;
 80003b4:	2300      	movs	r3, #0


}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <MCAL_GPIO_INIT>:

//}

// SET GPIO PIN
void MCAL_GPIO_INIT(GPIO_Type_Def* GPIOX,GPIO_PinConfig_t* pin_config)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	//PIN confi. low from  0---->7
	//PIN confi. high from 8---->15

	volatile uint32_t* configregerster =NULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config =0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	73fb      	strb	r3, [r7, #15]
	configregerster = (pin_config->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOX->CRL : &GPIOX->CRH;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	881b      	ldrh	r3, [r3, #0]
 80003d6:	2bff      	cmp	r3, #255	; 0xff
 80003d8:	d801      	bhi.n	80003de <MCAL_GPIO_INIT+0x1e>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	e001      	b.n	80003e2 <MCAL_GPIO_INIT+0x22>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3304      	adds	r3, #4
 80003e2:	60bb      	str	r3, [r7, #8]


	if( (pin_config->GPIO_Mode == GPIO_MODE_output_Open_drain)||(pin_config->GPIO_Mode == GPIO_MODE_output_push_pull)||(pin_config->GPIO_Mode == GPIO_MODE_AF_output_Open_drain)||(pin_config->GPIO_Mode == GPIO_MODE_AF_output_push_pull))
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	2b05      	cmp	r3, #5
 80003ea:	d00b      	beq.n	8000404 <MCAL_GPIO_INIT+0x44>
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	789b      	ldrb	r3, [r3, #2]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d007      	beq.n	8000404 <MCAL_GPIO_INIT+0x44>
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	789b      	ldrb	r3, [r3, #2]
 80003f8:	2b07      	cmp	r3, #7
 80003fa:	d003      	beq.n	8000404 <MCAL_GPIO_INIT+0x44>
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	789b      	ldrb	r3, [r3, #2]
 8000400:	2b06      	cmp	r3, #6
 8000402:	d10e      	bne.n	8000422 <MCAL_GPIO_INIT+0x62>
	{

		PIN_config = ((((pin_config->GPIO_Mode -4) <<2 ) | (pin_config->GPIO_SPEED_OUT)) & 0X0f);
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	3b04      	subs	r3, #4
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	b25a      	sxtb	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	78db      	ldrb	r3, [r3, #3]
 8000412:	b25b      	sxtb	r3, r3
 8000414:	4313      	orrs	r3, r2
 8000416:	b25b      	sxtb	r3, r3
 8000418:	b2db      	uxtb	r3, r3
 800041a:	f003 030f 	and.w	r3, r3, #15
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	e02c      	b.n	800047c <MCAL_GPIO_INIT+0xbc>

	}
	else
	{
		if((pin_config->GPIO_Mode == GPIO_MODE_INPUT_FLO)||pin_config->GPIO_Mode == GPIO_MODE_Analog)
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d003      	beq.n	8000432 <MCAL_GPIO_INIT+0x72>
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	789b      	ldrb	r3, [r3, #2]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d107      	bne.n	8000442 <MCAL_GPIO_INIT+0x82>
		{
			PIN_config = ((((pin_config->GPIO_Mode)<<2)| 0x0)&0x0f);
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 030f 	and.w	r3, r3, #15
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e01c      	b.n	800047c <MCAL_GPIO_INIT+0xbc>





		}else if (pin_config->GPIO_Mode == GPIO_MODE_AF_INPUT)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b08      	cmp	r3, #8
 8000448:	d102      	bne.n	8000450 <MCAL_GPIO_INIT+0x90>
		{
			PIN_config = ((((GPIO_MODE_INPUT_FLO)<<2)| 0x0)&0x0f);
 800044a:	2304      	movs	r3, #4
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	e015      	b.n	800047c <MCAL_GPIO_INIT+0xbc>


		}else
		{
			PIN_config = ((((GPIO_MODE_INPUT_PULL_UP)<<2)| 0x0)&0x0f);
 8000450:	2308      	movs	r3, #8
 8000452:	73fb      	strb	r3, [r7, #15]
			if (pin_config->GPIO_Mode == GPIO_MODE_INPUT_PULL_UP){
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	2b02      	cmp	r3, #2
 800045a:	d107      	bne.n	800046c <MCAL_GPIO_INIT+0xac>
				GPIOX->ODR |= pin_config->GPIO_PinNumber;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	8812      	ldrh	r2, [r2, #0]
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	e007      	b.n	800047c <MCAL_GPIO_INIT+0xbc>
			else
			{



				GPIOX->ODR &= ~(pin_config->GPIO_PinNumber);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	683a      	ldr	r2, [r7, #0]
 8000472:	8812      	ldrh	r2, [r2, #0]
 8000474:	43d2      	mvns	r2, r2
 8000476:	401a      	ands	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	60da      	str	r2, [r3, #12]




	}
	(*configregerster) |= ((PIN_config) << GET_CRLH_Position(pin_config->GPIO_PinNumber));
 800047c:	7bfc      	ldrb	r4, [r7, #15]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff39 	bl	80002fa <GET_CRLH_Position>
 8000488:	4603      	mov	r3, r0
 800048a:	fa04 f203 	lsl.w	r2, r4, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	431a      	orrs	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]


}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bd90      	pop	{r4, r7, pc}

080004a0 <MCAL_GPIO_WRITE_PIN>:
	return port_value;

}

void MCAL_GPIO_WRITE_PIN(GPIO_Type_Def* GPIOX,uint16_t PinNumber,uint8_t value)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
 80004ac:	4613      	mov	r3, r2
 80004ae:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 80004b0:	787b      	ldrb	r3, [r7, #1]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d003      	beq.n	80004be <MCAL_GPIO_WRITE_PIN+0x1e>
	{
		GPIOX->BSRR = (uint32_t)PinNumber;
 80004b6:	887a      	ldrh	r2, [r7, #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	611a      	str	r2, [r3, #16]
	{
		GPIOX->BRR = (uint32_t) PinNumber;

	}

}
 80004bc:	e002      	b.n	80004c4 <MCAL_GPIO_WRITE_PIN+0x24>
		GPIOX->BRR = (uint32_t) PinNumber;
 80004be:	887a      	ldrh	r2, [r7, #2]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	615a      	str	r2, [r3, #20]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
	...

080004d0 <EXTI0_IRQHandler>:
}
//================================================================//
//ISR Functions

void EXTI0_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	//clear pending register by set bit by 1
	EXTI->PR |= 1<<0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI0_IRQHandler+0x1c>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <EXTI0_IRQHandler+0x1c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[0]();
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <EXTI0_IRQHandler+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4798      	blx	r3

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010400 	.word	0x40010400
 80004f0:	2000002c 	.word	0x2000002c

080004f4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <EXTI1_IRQHandler+0x1c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <EXTI1_IRQHandler+0x1c>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[1]();
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <EXTI1_IRQHandler+0x20>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4798      	blx	r3


}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010400 	.word	0x40010400
 8000514:	2000002c 	.word	0x2000002c

08000518 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI2_IRQHandler+0x1c>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <EXTI2_IRQHandler+0x1c>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[2]();
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <EXTI2_IRQHandler+0x20>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4798      	blx	r3

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010400 	.word	0x40010400
 8000538:	2000002c 	.word	0x2000002c

0800053c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <EXTI3_IRQHandler+0x1c>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <EXTI3_IRQHandler+0x1c>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[3]();
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <EXTI3_IRQHandler+0x20>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	4798      	blx	r3

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40010400 	.word	0x40010400
 800055c:	2000002c 	.word	0x2000002c

08000560 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <EXTI4_IRQHandler+0x1c>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <EXTI4_IRQHandler+0x1c>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[4]();
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <EXTI4_IRQHandler+0x20>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	4798      	blx	r3

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010400 	.word	0x40010400
 8000580:	2000002c 	.word	0x2000002c

08000584 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<5;GP_CALLBACK[5]();}
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI9_5_IRQHandler+0x22>
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 800059a:	f043 0320 	orr.w	r3, r3, #32
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<6;GP_CALLBACK[6]();}
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f003 0320 	and.w	r3, r3, #32
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <EXTI9_5_IRQHandler+0x40>
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<7;GP_CALLBACK[7]();}
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d008      	beq.n	80005e2 <EXTI9_5_IRQHandler+0x5e>
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005da:	6153      	str	r3, [r2, #20]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<8;GP_CALLBACK[8]();}
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d008      	beq.n	8000600 <EXTI9_5_IRQHandler+0x7c>
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005fc:	6a1b      	ldr	r3, [r3, #32]
 80005fe:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<9;GP_CALLBACK[9]();}
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <EXTI9_5_IRQHandler+0x9a>
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 8000612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000616:	6153      	str	r3, [r2, #20]
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	4798      	blx	r3


}void EXTI15_10_IRQHandler(void)
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	2000002c 	.word	0x2000002c

0800062c <EXTI15_10_IRQHandler>:
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){EXTI->PR |= 1<<10;GP_CALLBACK[10]();}
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <EXTI15_10_IRQHandler+0x22>
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 800064a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064c:	4798      	blx	r3
	if(EXTI->PR & 1<<11){EXTI->PR |= 1<<11;GP_CALLBACK[11]();}
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <EXTI15_10_IRQHandler+0x40>
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	4798      	blx	r3
	if(EXTI->PR & 1<<12){EXTI->PR |= 1<<12;GP_CALLBACK[12]();}
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <EXTI15_10_IRQHandler+0x5e>
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000682:	6153      	str	r3, [r2, #20]
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4798      	blx	r3
	if(EXTI->PR & 1<<13){EXTI->PR |= 1<<13;GP_CALLBACK[13]();}
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <EXTI15_10_IRQHandler+0x7c>
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800069c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a6:	4798      	blx	r3
	if(EXTI->PR & 1<<14){EXTI->PR |= 1<<14;GP_CALLBACK[14]();}
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <EXTI15_10_IRQHandler+0x9a>
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 80006c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006c4:	4798      	blx	r3


}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40010400 	.word	0x40010400
 80006d0:	2000002c 	.word	0x2000002c

080006d4 <MCAL_RCC_GetSYS_CLKfreq>:



//--------------------------
uint32_t MCAL_RCC_GetSYS_CLKfreq(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	switch((RCC->CFGR>>2 )&0b11)
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MCAL_RCC_GetSYS_CLKfreq+0x30>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d006      	beq.n	80006f4 <MCAL_RCC_GetSYS_CLKfreq+0x20>
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d302      	bcc.n	80006f0 <MCAL_RCC_GetSYS_CLKfreq+0x1c>
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d004      	beq.n	80006f8 <MCAL_RCC_GetSYS_CLKfreq+0x24>
 80006ee:	e005      	b.n	80006fc <MCAL_RCC_GetSYS_CLKfreq+0x28>
	{
	case(0):
			return HSI_RC_CLK;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MCAL_RCC_GetSYS_CLKfreq+0x34>)
 80006f2:	e003      	b.n	80006fc <MCAL_RCC_GetSYS_CLKfreq+0x28>
	break;
	case(1):

 			return HSE_CLK;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <MCAL_RCC_GetSYS_CLKfreq+0x38>)
 80006f6:	e001      	b.n	80006fc <MCAL_RCC_GetSYS_CLKfreq+0x28>
	break;
	case(2):
			return 16000000;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <MCAL_RCC_GetSYS_CLKfreq+0x38>)
 80006fa:	e7ff      	b.n	80006fc <MCAL_RCC_GetSYS_CLKfreq+0x28>
	break;

	}


}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000
 8000708:	007a1200 	.word	0x007a1200
 800070c:	00f42400 	.word	0x00f42400

08000710 <MCAL_RCC_GetHCLKfreq>:

uint32_t MCAL_RCC_GetHCLKfreq(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetSYS_CLKfreq ()>> AHBPrescalTable[RCC->CFGR >> 4 & 0xf]);
 8000714:	f7ff ffde 	bl	80006d4 <MCAL_RCC_GetSYS_CLKfreq>
 8000718:	4601      	mov	r1, r0
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MCAL_RCC_GetHCLKfreq+0x20>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	091b      	lsrs	r3, r3, #4
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	4a03      	ldr	r2, [pc, #12]	; (8000734 <MCAL_RCC_GetHCLKfreq+0x24>)
 8000726:	5cd3      	ldrb	r3, [r2, r3]
 8000728:	fa21 f303 	lsr.w	r3, r1, r3

}
 800072c:	4618      	mov	r0, r3
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	08000f08 	.word	0x08000f08

08000738 <MCAL_RCC_GetPCLK1freq>:

uint32_t MCAL_RCC_GetPCLK1freq(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLKfreq ()>> APBPrescalTable[RCC->CFGR >> 8 & 0b111]);
 800073c:	f7ff ffe8 	bl	8000710 <MCAL_RCC_GetHCLKfreq>
 8000740:	4601      	mov	r1, r0
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MCAL_RCC_GetPCLK1freq+0x20>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	f003 0307 	and.w	r3, r3, #7
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <MCAL_RCC_GetPCLK1freq+0x24>)
 800074e:	5cd3      	ldrb	r3, [r2, r3]
 8000750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	08000f00 	.word	0x08000f00

08000760 <MCAL_RCC_GetPCLK2freq>:
uint32_t MCAL_RCC_GetPCLK2freq(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLKfreq ()>> APBPrescalTable[RCC->CFGR >> 11 & 0b111]);
 8000764:	f7ff ffd4 	bl	8000710 <MCAL_RCC_GetHCLKfreq>
 8000768:	4601      	mov	r1, r0
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MCAL_RCC_GetPCLK2freq+0x20>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	0adb      	lsrs	r3, r3, #11
 8000770:	f003 0307 	and.w	r3, r3, #7
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <MCAL_RCC_GetPCLK2freq+0x24>)
 8000776:	5cd3      	ldrb	r3, [r2, r3]
 8000778:	fa21 f303 	lsr.w	r3, r1, r3

}
 800077c:	4618      	mov	r0, r3
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	08000f00 	.word	0x08000f00

08000788 <MCAL_SPI_Init>:



//====================================================================
void MCAL_SPI_Init(SPI_Type_Def* SPIx ,SPI_Config* SPI_Config)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	//Safety for registers to make SPI not to run until all configs are done

	uint16_t tempRegCR1 = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81fb      	strh	r3, [r7, #14]
	uint16_t tempRegCR2 = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <MCAL_SPI_Init+0x10c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d109      	bne.n	80007b6 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_Config;
 80007a2:	4a3d      	ldr	r2, [pc, #244]	; (8000898 <MCAL_SPI_Init+0x110>)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80007a8:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MCAL_SPI_Init+0x114>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a3b      	ldr	r2, [pc, #236]	; (800089c <MCAL_SPI_Init+0x114>)
 80007ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	e00c      	b.n	80007d0 <MCAL_SPI_Init+0x48>

	}else if (SPIx == SPI2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a39      	ldr	r2, [pc, #228]	; (80008a0 <MCAL_SPI_Init+0x118>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d108      	bne.n	80007d0 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_Config;
 80007be:	4a36      	ldr	r2, [pc, #216]	; (8000898 <MCAL_SPI_Init+0x110>)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <MCAL_SPI_Init+0x114>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a34      	ldr	r2, [pc, #208]	; (800089c <MCAL_SPI_Init+0x114>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6153      	str	r3, [r2, #20]

	}

	//enable SPI 1 on bit 6 in CR1 Reg

	tempRegCR1 = (0x1U<<6);
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	81fb      	strh	r3, [r7, #14]

	//Master or Slave Mode

	tempRegCR1 |= SPI_Config->Device_Mode;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	881a      	ldrh	r2, [r3, #0]
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	4313      	orrs	r3, r2
 80007dc:	81fb      	strh	r3, [r7, #14]

	tempRegCR1 |= SPI_Config->Comunication_Mode;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	885a      	ldrh	r2, [r3, #2]
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	81fb      	strh	r3, [r7, #14]

	tempRegCR1 |= SPI_Config->Frame_Format;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	889a      	ldrh	r2, [r3, #4]
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	81fb      	strh	r3, [r7, #14]

	tempRegCR1 |= SPI_Config->Data_Size;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	88da      	ldrh	r2, [r3, #6]
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	81fb      	strh	r3, [r7, #14]

	tempRegCR1 |= SPI_Config->CLKPhase;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	895a      	ldrh	r2, [r3, #10]
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4313      	orrs	r3, r2
 8000804:	81fb      	strh	r3, [r7, #14]

	tempRegCR1 |= SPI_Config->CLKPolarity;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	891a      	ldrh	r2, [r3, #8]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	4313      	orrs	r3, r2
 800080e:	81fb      	strh	r3, [r7, #14]

	//======================NSS=====================
	if(SPI_Config->NSS == SPI_NSS_Hardware_Master_SS_Output_Enable)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	899b      	ldrh	r3, [r3, #12]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d105      	bne.n	8000824 <MCAL_SPI_Init+0x9c>
	{
		tempRegCR2 |= SPI_Config->NSS;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	899a      	ldrh	r2, [r3, #12]
 800081c:	89bb      	ldrh	r3, [r7, #12]
 800081e:	4313      	orrs	r3, r2
 8000820:	81bb      	strh	r3, [r7, #12]
 8000822:	e004      	b.n	800082e <MCAL_SPI_Init+0xa6>
	{
		tempRegCR2 &= SPI_Config->NSS;

	}else
	{
		tempRegCR1 |= SPI_Config->NSS;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	899a      	ldrh	r2, [r3, #12]
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	4313      	orrs	r3, r2
 800082c:	81fb      	strh	r3, [r7, #14]

	}

	//=====================prescaler==================

	tempRegCR1 |=SPI_Config->SPI_BAUDRATE_PRECALER;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	89da      	ldrh	r2, [r3, #14]
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	4313      	orrs	r3, r2
 8000836:	81fb      	strh	r3, [r7, #14]

	//================================================
	if(SPI_Config->IRQ_Enable |= SPI_IRQ_ENABLE_NONE)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	8a1a      	ldrh	r2, [r3, #16]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	821a      	strh	r2, [r3, #16]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	8a1b      	ldrh	r3, [r3, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d019      	beq.n	800087c <MCAL_SPI_Init+0xf4>
	{
		tempRegCR2 |= SPI_Config->IRQ_Enable;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	8a1a      	ldrh	r2, [r3, #16]
 800084c:	89bb      	ldrh	r3, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	81bb      	strh	r3, [r7, #12]
		if (SPIx == SPI1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MCAL_SPI_Init+0x10c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <MCAL_SPI_Init+0xe0>
		{
			NVIC_IRQ35_SPI1_ENABLE;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MCAL_SPI_Init+0x11c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <MCAL_SPI_Init+0x11c>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e009      	b.n	800087c <MCAL_SPI_Init+0xf4>
		}else if (SPIx == SPI2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <MCAL_SPI_Init+0x118>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d105      	bne.n	800087c <MCAL_SPI_Init+0xf4>
		{
			NVIC_IRQ36_SPI2_ENABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MCAL_SPI_Init+0x11c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <MCAL_SPI_Init+0x11c>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
		}
	}
	SPIx->CR1 = tempRegCR1;
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempRegCR2;
 8000882:	89ba      	ldrh	r2, [r7, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	605a      	str	r2, [r3, #4]




}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40013000 	.word	0x40013000
 8000898:	2000001c 	.word	0x2000001c
 800089c:	40021000 	.word	0x40021000
 80008a0:	40003800 	.word	0x40003800
 80008a4:	e000e104 	.word	0xe000e104

080008a8 <MCAL_SPI_TX_RX>:


}

void MCAL_SPI_TX_RX(SPI_Type_Def* SPIx ,uint16_t* PTxBuffer,enum PollingMechanisum PollingEN)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	4613      	mov	r3, r2
 80008b4:	71fb      	strb	r3, [r7, #7]
	if (PollingEN == pollingEnable)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d106      	bne.n	80008ca <MCAL_SPI_TX_RX+0x22>
		while (!(SPIx->SR & SPI_SR_TXE));
 80008bc:	bf00      	nop
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f9      	beq.n	80008be <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *PTxBuffer;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	60da      	str	r2, [r3, #12]

	if (PollingEN == pollingEnable)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d106      	bne.n	80008e8 <MCAL_SPI_TX_RX+0x40>
		while (!(SPIx->SR & SPI_SR_RXENE));
 80008da:	bf00      	nop
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f9      	beq.n	80008dc <MCAL_SPI_TX_RX+0x34>
	*PTxBuffer = SPIx->DR;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	801a      	strh	r2, [r3, #0]



}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <SPI1_IRQHandler>:

//==================================interrupt==============================

void SPI1_IRQHandler (void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ((SPI1->SR & (1<<1))>>1);
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <SPI1_IRQHandler+0x54>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	085b      	lsrs	r3, r3, #1
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	793b      	ldrb	r3, [r7, #4]
 8000910:	f362 0300 	bfi	r3, r2, #0, #1
 8000914:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0))>>0);
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <SPI1_IRQHandler+0x54>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	793b      	ldrb	r3, [r7, #4]
 8000922:	f362 0341 	bfi	r3, r2, #1, #1
 8000926:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR & (1<<4))>>4);
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <SPI1_IRQHandler+0x54>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	091b      	lsrs	r3, r3, #4
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	793b      	ldrb	r3, [r7, #4]
 8000936:	f362 0382 	bfi	r3, r2, #2, #1
 800093a:	713b      	strb	r3, [r7, #4]




	Global_SPI_Config [SPI1_Index]->P_IRQ_CallBack(irq_src);
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SPI1_IRQHandler+0x58>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	7938      	ldrb	r0, [r7, #4]
 8000944:	4798      	blx	r3

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40013000 	.word	0x40013000
 8000954:	2000001c 	.word	0x2000001c

08000958 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ((SPI2->SR & (1<<1))>>1);
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <SPI2_IRQHandler+0x54>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	793b      	ldrb	r3, [r7, #4]
 800096c:	f362 0300 	bfi	r3, r2, #0, #1
 8000970:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0))>>0);
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <SPI2_IRQHandler+0x54>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	793b      	ldrb	r3, [r7, #4]
 800097e:	f362 0341 	bfi	r3, r2, #1, #1
 8000982:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR & (1<<4))>>4);
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <SPI2_IRQHandler+0x54>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	793b      	ldrb	r3, [r7, #4]
 8000992:	f362 0382 	bfi	r3, r2, #2, #1
 8000996:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config [SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SPI2_IRQHandler+0x58>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	7938      	ldrb	r0, [r7, #4]
 80009a0:	4798      	blx	r3

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40003800 	.word	0x40003800
 80009b0:	2000001c 	.word	0x2000001c

080009b4 <MCAL_SPI_GPIO_SET_PINS>:

void MCAL_SPI_GPIO_SET_PINS(SPI_Type_Def* SPIx )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	//PA4--->SPI1 NSS
	//PA5--->SPI1 SCK
	//PA6--->SPI1 MOSI
	//PA7--->SPI1 MISO

	if (SPIx == SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a78      	ldr	r2, [pc, #480]	; (8000ba0 <MCAL_SPI_GPIO_SET_PINS+0x1ec>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d16f      	bne.n	8000aa4 <MCAL_SPI_GPIO_SET_PINS+0xf0>
	{
		if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_Device_Mode_Master)
 80009c4:	4b77      	ldr	r3, [pc, #476]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d134      	bne.n	8000a38 <MCAL_SPI_GPIO_SET_PINS+0x84>
		{
			switch(Global_SPI_Config[SPI1_Index]->NSS )
 80009ce:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	899b      	ldrh	r3, [r3, #12]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d10c      	bne.n	80009f2 <MCAL_SPI_GPIO_SET_PINS+0x3e>

				break;

			case SPI_NSS_Hardware_Master_SS_Output_Enable:

				PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80009d8:	2310      	movs	r3, #16
 80009da:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 80009dc:	2306      	movs	r3, #6
 80009de:	73bb      	strb	r3, [r7, #14]
				PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_INIT(GPIOA, &PinConfig);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	486f      	ldr	r0, [pc, #444]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 80009ec:	f7ff fce8 	bl	80003c0 <MCAL_GPIO_INIT>

				break;
 80009f0:	bf00      	nop



			}

			PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80009f2:	2320      	movs	r3, #32
 80009f4:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 80009f6:	2306      	movs	r3, #6
 80009f8:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PinConfig);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4868      	ldr	r0, [pc, #416]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a06:	f7ff fcdb 	bl	80003c0 <MCAL_GPIO_INIT>

			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4863      	ldr	r0, [pc, #396]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a1a:	f7ff fcd1 	bl	80003c0 <MCAL_GPIO_INIT>

			PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000a22:	2306      	movs	r3, #6
 8000a24:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	485d      	ldr	r0, [pc, #372]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a32:	f7ff fcc5 	bl	80003c0 <MCAL_GPIO_INIT>
	}




}
 8000a36:	e0af      	b.n	8000b98 <MCAL_SPI_GPIO_SET_PINS+0x1e4>
		}else if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_Device_Mode_Slave)
 8000a38:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 80aa 	bne.w	8000b98 <MCAL_SPI_GPIO_SET_PINS+0x1e4>
			if (Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hardware_Salve )
 8000a44:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	899b      	ldrh	r3, [r3, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d109      	bne.n	8000a62 <MCAL_SPI_GPIO_SET_PINS+0xae>
				PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000a4e:	2310      	movs	r3, #16
 8000a50:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4852      	ldr	r0, [pc, #328]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a5e:	f7ff fcaf 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000a62:	2320      	movs	r3, #32
 8000a64:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	484d      	ldr	r0, [pc, #308]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a72:	f7ff fca5 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4847      	ldr	r0, [pc, #284]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a8a:	f7ff fc99 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a92:	2301      	movs	r3, #1
 8000a94:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4842      	ldr	r0, [pc, #264]	; (8000ba8 <MCAL_SPI_GPIO_SET_PINS+0x1f4>)
 8000a9e:	f7ff fc8f 	bl	80003c0 <MCAL_GPIO_INIT>
}
 8000aa2:	e079      	b.n	8000b98 <MCAL_SPI_GPIO_SET_PINS+0x1e4>
	else if (SPIx == SPI2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a41      	ldr	r2, [pc, #260]	; (8000bac <MCAL_SPI_GPIO_SET_PINS+0x1f8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d175      	bne.n	8000b98 <MCAL_SPI_GPIO_SET_PINS+0x1e4>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_Device_Mode_Master)
 8000aac:	4b3d      	ldr	r3, [pc, #244]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d138      	bne.n	8000b28 <MCAL_SPI_GPIO_SET_PINS+0x174>
			switch(Global_SPI_Config[SPI2_Index]->NSS )
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	899b      	ldrh	r3, [r3, #12]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d10d      	bne.n	8000adc <MCAL_SPI_GPIO_SET_PINS+0x128>
				PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	73bb      	strb	r3, [r7, #14]
				PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4836      	ldr	r0, [pc, #216]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000ad6:	f7ff fc73 	bl	80003c0 <MCAL_GPIO_INIT>
				break;
 8000ada:	bf00      	nop
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	482f      	ldr	r0, [pc, #188]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000af2:	f7ff fc65 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000af6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000afa:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000b08:	f7ff fc5a 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b10:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000b12:	2306      	movs	r3, #6
 8000b14:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4823      	ldr	r0, [pc, #140]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000b22:	f7ff fc4d 	bl	80003c0 <MCAL_GPIO_INIT>
}
 8000b26:	e037      	b.n	8000b98 <MCAL_SPI_GPIO_SET_PINS+0x1e4>
		}else if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_Device_Mode_Slave)
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d132      	bne.n	8000b98 <MCAL_SPI_GPIO_SET_PINS+0x1e4>
			if (Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_Hardware_Salve )
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MCAL_SPI_GPIO_SET_PINS+0x1f0>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	899b      	ldrh	r3, [r3, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10a      	bne.n	8000b52 <MCAL_SPI_GPIO_SET_PINS+0x19e>
				PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	81bb      	strh	r3, [r7, #12]
				PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000b4e:	f7ff fc37 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000b64:	f7ff fc2c 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b6c:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000b7e:	f7ff fc1f 	bl	80003c0 <MCAL_GPIO_INIT>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b86:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB, &PinConfig);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MCAL_SPI_GPIO_SET_PINS+0x1fc>)
 8000b94:	f7ff fc14 	bl	80003c0 <MCAL_GPIO_INIT>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40013000 	.word	0x40013000
 8000ba4:	2000001c 	.word	0x2000001c
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40003800 	.word	0x40003800
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <MCAL_UART_Init>:




void MCAL_UART_Init(USART_Type_Def* USARTx,USART_Coinf* USART_Config)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	Global_USART_Config = USART_Config;
 8000bbe:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <MCAL_UART_Init+0x140>)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	6013      	str	r3, [r2, #0]
	uint32_t pclock;


	//ENABLE CLK

	if(USARTx == USART1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	; (8000cf8 <MCAL_UART_Init+0x144>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d106      	bne.n	8000bda <MCAL_UART_Init+0x26>

		RCC_USART1_CLK_EN();
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <MCAL_UART_Init+0x148>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a4a      	ldr	r2, [pc, #296]	; (8000cfc <MCAL_UART_Init+0x148>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	e014      	b.n	8000c04 <MCAL_UART_Init+0x50>

	else if (USARTx == USART2)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <MCAL_UART_Init+0x14c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d106      	bne.n	8000bf0 <MCAL_UART_Init+0x3c>

		RCC_USART2_CLK_EN();
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <MCAL_UART_Init+0x148>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <MCAL_UART_Init+0x148>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	e009      	b.n	8000c04 <MCAL_UART_Init+0x50>


	else if (USARTx == USART3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a44      	ldr	r2, [pc, #272]	; (8000d04 <MCAL_UART_Init+0x150>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d105      	bne.n	8000c04 <MCAL_UART_Init+0x50>

		RCC_USART3_CLK_EN();
 8000bf8:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <MCAL_UART_Init+0x148>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	4a3f      	ldr	r2, [pc, #252]	; (8000cfc <MCAL_UART_Init+0x148>)
 8000bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c02:	6153      	str	r3, [r2, #20]



	//ENABLE USART

	USARTx->CR1 = (1<<13);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0a:	60da      	str	r2, [r3, #12]

	//ENABLE USART TX RX MODES

	USARTx->CR1 = USART_Config->USART_Mode;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60da      	str	r2, [r3, #12]

	//PAYLOAD LENGTH

	USARTx->CR1 = USART_Config->PayLoadLenght;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	7a1b      	ldrb	r3, [r3, #8]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
	//PARIYT
	USARTx->CR1 = USART_Config->Parity;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	7a5b      	ldrb	r3, [r3, #9]
 8000c24:	461a      	mov	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60da      	str	r2, [r3, #12]
	//STOP BITS
	USARTx->CR1 = USART_Config->StopBits;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	7a9b      	ldrb	r3, [r3, #10]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60da      	str	r2, [r3, #12]
	//FLOW RATE
	USARTx->CR1 = USART_Config->HWFlowCTL;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	7adb      	ldrb	r3, [r3, #11]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60da      	str	r2, [r3, #12]


	if(USARTx == USART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <MCAL_UART_Init+0x144>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d103      	bne.n	8000c4e <MCAL_UART_Init+0x9a>
	{
		pclock = MCAL_RCC_GetPCLK2freq();
 8000c46:	f7ff fd8b 	bl	8000760 <MCAL_RCC_GetPCLK2freq>
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	e002      	b.n	8000c54 <MCAL_UART_Init+0xa0>
	}
	else
	{
		pclock = MCAL_RCC_GetPCLK1freq();
 8000c4e:	f7ff fd73 	bl	8000738 <MCAL_RCC_GetPCLK1freq>
 8000c52:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register (pclock , USART_Config->BaudRate));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c60:	0119      	lsls	r1, r3, #4
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	009a      	lsls	r2, r3, #2
 8000c6c:	441a      	add	r2, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	fb00 f303 	mul.w	r3, r0, r3
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <MCAL_UART_Init+0x154>)
 8000c90:	fba2 2303 	umull	r2, r3, r2, r3
 8000c94:	095b      	lsrs	r3, r3, #5
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	60bb      	str	r3, [r7, #8]

	USARTx->BRR =BRR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	609a      	str	r2, [r3, #8]

	//enable and disable intrup.

	if(USART_Config->IRQ_ENABLE != USART_IRQ_ENABLE_NONE)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	7b1b      	ldrb	r3, [r3, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d01f      	beq.n	8000cec <MCAL_UART_Init+0x138>
	{
		//NVIC ENABLE

		if(USARTx == USART1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MCAL_UART_Init+0x144>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d106      	bne.n	8000cc2 <MCAL_UART_Init+0x10e>

			NVIC_IRQ37_USART1_ENABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MCAL_UART_Init+0x158>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <MCAL_UART_Init+0x158>)
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	6013      	str	r3, [r2, #0]
	//BRR = UART_BRR_Register(pclock,USART_Config->BaudRate);

	//USARTx->BRR =BRR;


}
 8000cc0:	e014      	b.n	8000cec <MCAL_UART_Init+0x138>
		else if (USARTx == USART2 )
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <MCAL_UART_Init+0x14c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d106      	bne.n	8000cd8 <MCAL_UART_Init+0x124>
			NVIC_IRQ38_USART2_ENABLE;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MCAL_UART_Init+0x158>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <MCAL_UART_Init+0x158>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	6013      	str	r3, [r2, #0]
}
 8000cd6:	e009      	b.n	8000cec <MCAL_UART_Init+0x138>
		else if (USARTx == USART3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <MCAL_UART_Init+0x150>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d105      	bne.n	8000cec <MCAL_UART_Init+0x138>
			NVIC_IRQ39_USART3_ENABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MCAL_UART_Init+0x158>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <MCAL_UART_Init+0x158>)
 8000ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000024 	.word	0x20000024
 8000cf8:	40013800 	.word	0x40013800
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40004800 	.word	0x40004800
 8000d08:	51eb851f 	.word	0x51eb851f
 8000d0c:	e000e104 	.word	0xe000e104

08000d10 <MCAL_UART_SendData>:


}

void MCAL_UART_SendData(USART_Type_Def* USARTx,uint16_t* PTxBuffer,enum pulling_mechanism Pulling_EN)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
	if (Pulling_EN == enable)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d106      	bne.n	8000d32 <MCAL_UART_SendData+0x22>
	{
		while(!(USARTx->SR & 1<<7));
 8000d24:	bf00      	nop
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f9      	beq.n	8000d26 <MCAL_UART_SendData+0x16>

	if (Global_USART_Config->PayLoadLenght == USART_PayLoad_Length_9B)
	{
		USARTx->DR = (*PTxBuffer & (uint16_t) 0x01FF);

	}else if (Global_USART_Config->PayLoadLenght == USART_PayLoad_Length_8B)
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MCAL_UART_SendData+0x40>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	7a1b      	ldrb	r3, [r3, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <MCAL_UART_SendData+0x36>
	{
		USARTx->DR = (*PTxBuffer & (uint8_t) 0xFF);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	605a      	str	r2, [r3, #4]


	}

}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000024 	.word	0x20000024

08000d54 <MCAL_UART_ReceiveData>:
{
	while (!(USARTx->SR & 1<<6));
}

void MCAL_UART_ReceiveData(USART_Type_Def* USARTx,uint16_t* PTxBuffer,enum pulling_mechanism Pulling_EN)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	71fb      	strb	r3, [r7, #7]
	if (Pulling_EN == enable)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d106      	bne.n	8000d76 <MCAL_UART_ReceiveData+0x22>
	{
		while(!(USARTx->SR & 1<<5));
 8000d68:	bf00      	nop
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f9      	beq.n	8000d6a <MCAL_UART_ReceiveData+0x16>


	}else
	{
		//for 8 bit data
		if (Global_USART_Config->Parity == USART_Parity_NONE)
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <MCAL_UART_ReceiveData+0x58>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	7a5b      	ldrb	r3, [r3, #9]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d107      	bne.n	8000d90 <MCAL_UART_ReceiveData+0x3c>
		{
			*((uint16_t*)(PTxBuffer)) = (USARTx->DR & (uint8_t) 0xFF);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	801a      	strh	r2, [r3, #0]





}
 8000d8e:	e007      	b.n	8000da0 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*)(PTxBuffer)) = (USARTx->DR & (uint8_t) 0x7F);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	801a      	strh	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000024 	.word	0x20000024

08000db0 <MCAL_UART_GPIO_Set_Pins>:




void MCAL_UART_GPIO_Set_Pins(USART_Type_Def* USARTx)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pincfg;

	if(USARTx == USART1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d118      	bne.n	8000df2 <MCAL_UART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9;
 8000dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc4:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000dd6:	f7ff faf3 	bl	80003c0 <MCAL_GPIO_INIT>


		//PA10 RX
		pincfg.GPIO_PinNumber= GPIO_PIN_10;
 8000dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dde:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000de0:	2308      	movs	r3, #8
 8000de2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	4820      	ldr	r0, [pc, #128]	; (8000e6c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000dec:	f7ff fae8 	bl	80003c0 <MCAL_GPIO_INIT>

		}
	}


}
 8000df0:	e036      	b.n	8000e60 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx == USART2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d116      	bne.n	8000e28 <MCAL_UART_GPIO_Set_Pins+0x78>
		pincfg.GPIO_PinNumber = GPIO_PIN_2;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000e0e:	f7ff fad7 	bl	80003c0 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber= GPIO_PIN_3;
 8000e12:	2308      	movs	r3, #8
 8000e14:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000e16:	2308      	movs	r3, #8
 8000e18:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4812      	ldr	r0, [pc, #72]	; (8000e6c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000e22:	f7ff facd 	bl	80003c0 <MCAL_GPIO_INIT>
}
 8000e26:	e01b      	b.n	8000e60 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx == USART3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d117      	bne.n	8000e60 <MCAL_UART_GPIO_Set_Pins+0xb0>
		pincfg.GPIO_PinNumber = GPIO_PIN_10;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_output_push_pull;
 8000e36:	2306      	movs	r3, #6
 8000e38:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOB, &pincfg);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000e46:	f7ff fabb 	bl	80003c0 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber= GPIO_PIN_11;
 8000e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4e:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000e50:	2308      	movs	r3, #8
 8000e52:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOB, &pincfg);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000e5c:	f7ff fab0 	bl	80003c0 <MCAL_GPIO_INIT>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40004800 	.word	0x40004800
 8000e78:	40010c00 	.word	0x40010c00

08000e7c <USART1_IRQHandler>:

//ISR

void USART1_IRQHandler (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CALLBACK;
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CALLBACK;
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CALLBACK;
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <__libc_init_array>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4e0c      	ldr	r6, [pc, #48]	; (8000ed8 <__libc_init_array+0x38>)
 8000ea6:	4c0d      	ldr	r4, [pc, #52]	; (8000edc <__libc_init_array+0x3c>)
 8000ea8:	1ba4      	subs	r4, r4, r6
 8000eaa:	10a4      	asrs	r4, r4, #2
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	d109      	bne.n	8000ec4 <__libc_init_array+0x24>
 8000eb0:	f000 f81a 	bl	8000ee8 <_init>
 8000eb4:	2500      	movs	r5, #0
 8000eb6:	4e0a      	ldr	r6, [pc, #40]	; (8000ee0 <__libc_init_array+0x40>)
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <__libc_init_array+0x44>)
 8000eba:	1ba4      	subs	r4, r4, r6
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	42a5      	cmp	r5, r4
 8000ec0:	d105      	bne.n	8000ece <__libc_init_array+0x2e>
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
 8000ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec8:	4798      	blx	r3
 8000eca:	3501      	adds	r5, #1
 8000ecc:	e7ee      	b.n	8000eac <__libc_init_array+0xc>
 8000ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed2:	4798      	blx	r3
 8000ed4:	3501      	adds	r5, #1
 8000ed6:	e7f2      	b.n	8000ebe <__libc_init_array+0x1e>
 8000ed8:	08000f18 	.word	0x08000f18
 8000edc:	08000f18 	.word	0x08000f18
 8000ee0:	08000f18 	.word	0x08000f18
 8000ee4:	08000f1c 	.word	0x08000f1c

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
